class VolumeDetector{analyseInfos=[];addWatchTarget(stream){if(stream.id in this.analyseInfos)return;const audioContext=new AudioContext;const mediaStreamAudioSourceNode=audioContext.createMediaStreamSource(stream);const analyserNode=audioContext.createAnalyser();mediaStreamAudioSourceNode.connect(analyserNode);const pcmData=new Float32Array(analyserNode.fftSize);this.analyseInfos.push({stream:stream,audioContext:audioContext,mediaStreamAudioSourceNode:mediaStreamAudioSourceNode,analyserNode:analyserNode,pcmData:pcmData,loudnessLastUpdated:0,loudnessAverage:0})}updateLoudness(){this.analyseInfos.forEach(o=>{o.analyserNode.getFloatTimeDomainData(o.pcmData);let sumSquares=0;for(const amplitude of o.pcmData){sumSquares+=amplitude*amplitude}o.loudnessLastUpdated=Math.sqrt(sumSquares/o.pcmData.length);o.loudnessAverage=o.loudnessAverage*.95+o.loudnessLastUpdated*.05})}findSpeaker(){if(this.analyseInfos.length===0)return;this.updateLoudness();return this.analyseInfos.reduce((a,b)=>{return a.loudnessAverage>b.loudnessAverage?a:b})}}