let allDevices=null;let scanning=false;let deviceIdx=0;let resolutionIdx=0;let videoSourceSelect=undefined;let audioSourceSelect=undefined;const quickScan=[{label:"VGA",width:640,height:480},{label:"360p(nHD)",width:640,height:360},{label:"CIF",width:352,height:288},{label:"QVGA",width:320,height:240},{label:"QCIF",width:176,height:144},{label:"QQVGA",width:160,height:120}];class UStream{conferenceId;clientId;RTCMediaConnection;RTCShareConnection;callbacks={mediaServerCallBacks:{error:err=>console.error(err),connectionClosed:(type,event)=>console.log("TODO: onConnectionClosed : ",type,event),iceStateChange:state=>console.log("mediaServer onIceStateChange : ",state),connected:event=>console.log("mediaServer onConnected : ",event)},sharingServerCallBacks:{onUserStatusChanged:event=>console.log("sharingServer onUserStatusChanged",event),onopen:event=>console.log("sharingServer onopen",event),onclose:event=>console.log("sharingServer onclose",event),onerror:event=>console.log("sharingServer onerror",event),onleave:event=>console.log("sharingServer onleave",event),onstream:event=>console.log("TODO onstream",event),onmessage:event=>console.log("TODO onmessage",event),onstreamended:event=>console.log("TODO onstreamended",event),onMediaError:(event,constraints)=>{console.log("sharingServer onMediaError",event,constraints);currentUserMediaRequest.mutex=false},onFileStart:file=>console.log("sharingServer onFileStart",file),onFileProgress:(chunk,uuid)=>console.log("sharingServer onFileProgress",chunk,uuid),onFileEnd:file=>console.log("TODO onFileEnd",file)}};constraint={audio:{},video:{width:{ideal:4096},height:{ideal:2160}}};connectionConfig={iceServers:null,iceTransportPolicy:null,maxBitrate:null};setConstraint(deviceId){let device=getResolution(deviceId);if(device!==undefined){this.constraint={audio:true,video:{deviceId:deviceId,frameRate:{ideal:15},width:{ideal:device.width},height:{ideal:device.height}}}}else{this.constraint={audio:true,video:{deviceId:deviceId,frameRate:{ideal:15},width:{ideal:640},height:{ideal:320}}}}}connectMediaEngine(webRtcUrl){this.RTCMediaConnection.startStreaming(webRtcUrl,this.connectionConfig)}async attachMedia(deviceId,videoElement){this.setConstraint(deviceId);if(!this.RTCMediaConnection){this.RTCMediaConnection=UMediaStreamer.create(this.callbacks.mediaServerCallBacks);this.RTCMediaConnection.callbacks=this.callbacks.mediaServerCallBacks}this.RTCMediaConnection.videoElement=videoElement;this.RTCMediaConnection.attachMedia(videoElement);await this.RTCMediaConnection.getUserMedia(this.constraint)}disconnectMediaEngine(){if(typeof this.RTCMediaConnection=="undefined")return;this.RTCMediaConnection.remove()}async connectSharingServer(sharingServerUrl,conferenceId,clientId){this.conferenceId=conferenceId;this.clientId=clientId;this.RTCShareConnection=new RTCMultiConnection;this.RTCShareConnection.socketURL=sharingServerUrl;this.RTCShareConnection.extra.userFullName=clientId;this.RTCShareConnection.autoCloseEntireSession=true;this.RTCShareConnection.maxParticipantsAllowed=1e3;this.RTCShareConnection.chunkSize=16e3;this.RTCShareConnection.enableFileSharing=true;this.RTCShareConnection.session={data:true};this.RTCShareConnection.sdpConstraints.mandatory={OfferToReceiveAudio:true,OfferToReceiveVideo:true};this.RTCShareConnection.autoSaveToDisk=false;this.RTCShareConnection.onUserStatusChanged=this.callbacks.sharingServerCallBacks.onUserStatusChanged;this.RTCShareConnection.onopen=this.callbacks.sharingServerCallBacks.onopen;this.RTCShareConnection.onclose=this.callbacks.sharingServerCallBacks.onclose;this.RTCShareConnection.onerror=this.callbacks.sharingServerCallBacks.onerror;this.RTCShareConnection.onleave=this.callbacks.sharingServerCallBacks.onleave;this.RTCShareConnection.onstream=this.callbacks.sharingServerCallBacks.onstream;this.RTCShareConnection.onmessage=this.callbacks.sharingServerCallBacks.onmessage;this.RTCShareConnection.onstreamended=this.callbacks.sharingServerCallBacks.onstreamended;this.RTCShareConnection.onFileStart=this.callbacks.sharingServerCallBacks.onFileStart;this.RTCShareConnection.onMediaError=this.callbacks.sharingServerCallBacks.onMediaError;this.RTCShareConnection.onFileProgress=this.callbacks.sharingServerCallBacks.onFileProgress;this.RTCShareConnection.onFileEnd=this.callbacks.sharingServerCallBacks.onFileEnd;this.RTCShareConnection.openOrJoin(conferenceId,(isRoomCreated,roomid,error)=>{if(error){alert(error);return}this.RTCShareConnection.socket.on("disconnect",function(){console.log("disconnected sharing Server.")})})}disconnectSharingServer(){if(typeof this.RTCShareConnection=="undefined")return;this.RTCShareConnection.getAllParticipants().forEach(user=>this.RTCShareConnection.disconnectWith(user));this.RTCShareConnection.close();this.RTCShareConnection.closeSocket();this.RTCShareConnection.isOnline=false}chat(name,text){this.RTCShareConnection.send({username:name,chatMessage:text,checkmark_id:this.RTCShareConnection.userid+this.RTCShareConnection.token()});console.log("chat message send: ",text)}shareFile(file){this.RTCShareConnection.shareFile(file)}shareScreen(){this.RTCShareConnection.addStream({screen:true});console.log("screen share start.")}stopScreenShare(){this.RTCShareConnection.attachStreams.forEach(o=>o.stop())}async addPlayer(id,container,url,onError){const player=await UMediaPlayer.create(container,{autoStart:true,autoFallback:true,controls:false,showBigPlayButton:false,timecode:false,playbackRates:[1],volume:100,adClient:false,lang:"en",sources:[{type:"webrtc",file:url}],webrtcConfig:[{timeoutMaxRetry:0,connectionTimeout:1e4}]});player.playerId=id;player.on("stateChanged",state=>{if(state.newstate!=="error")return;setTimeout(()=>player.trigger("stateChanged",{prevState:"error",newstate:"loading"}),0);setTimeout(()=>player.load(),1e3);if(onError){onError(state)}});return player}removePlayer(id){this.getPlayers().find(o=>o.playerId===id).remove()}getPlayers(){return UMediaPlayer.playerList}setOnSharingUserStatusChanged(func){console.log("TODO: setOnSharingUserStatusChanged");this.callbacks.sharingServerCallBacks.onUserStatusChanged=func;if(this.RTCShareConnection){this.RTCShareConnection.onUserStatusChanged=func}console.log("TODO: setOnSharingUserStatusChanged")}setOnSharingOpen(func){console.log("TODO: setOnSharingOpen");this.callbacks.sharingServerCallBacks.onopen=func;if(this.RTCShareConnection){this.RTCShareConnection.onopen=func}console.log("TODO: setOnSharingOpen")}setOnSharingClose(func){console.log("TODO: setOnSharingClose");this.callbacks.sharingServerCallBacks.onclose=func;if(this.RTCShareConnection){this.RTCShareConnection.onclose=func}console.log("TODO: setOnSharingClose")}setOnSharingError(func){console.log("TODO: setOnSharingError");this.callbacks.sharingServerCallBacks.onerror=func;if(this.RTCShareConnection){this.RTCShareConnection.onerror=func}console.log("TODO: setOnSharingError")}setOnSharingLeave(func){console.log("TODO: setOnSharingLeave");this.callbacks.sharingServerCallBacks.onleave=func;if(this.RTCShareConnection){this.RTCShareConnection.onleave=func}console.log("TODO: setOnSharingLeave")}setOnSharingStream(func){this.callbacks.sharingServerCallBacks.onstream=func;if(this.RTCShareConnection){this.RTCShareConnection.onstream=func}}setOnSharingMessage(func){this.callbacks.sharingServerCallBacks.onmessage=func;if(this.RTCShareConnection){this.RTCShareConnection.onmessage=func}}setOnSharingStreamended(func){this.callbacks.sharingServerCallBacks.onstreamended=func;if(this.RTCShareConnection){this.RTCShareConnection.onstreamended=func}}setOnSharingFileStart(func){console.log("TODO: setOnSharingFileStart");this.callbacks.sharingServerCallBacks.onFileStart=func;if(this.RTCShareConnection){this.RTCShareConnection.onFileStart=func}console.log("TODO: setOnSharingFileStart")}setOnSharingFileProgress(func){console.log("TODO: setOnSharingFileProgress");this.callbacks.sharingServerCallBacks.onFileProgress=func;if(this.RTCShareConnection){this.RTCShareConnection.onFileProgress=func}console.log("TODO: setOnSharingFileProgress")}setOnSharingFileEnd(func){this.callbacks.sharingServerCallBacks.onFileEnd=func;if(this.RTCShareConnection){this.RTCShareConnection.onFileEnd=func}}setOnMediaConnectionError(func){console.log("TODO: setOnMediaConnectionError");this.callbacks.mediaServerCallBacks.error=func;if(this.RTCMediaConnection){this.RTCMediaConnection.callbacks=this.callbacks.mediaServerCallBacks}console.log("TODO: setOnMediaConnectionError")}setOnMediaConnectionConnectionClosed(func){console.log("TODO: setOnMediaConnectionConnectionClosed");this.callbacks.mediaServerCallBacks.connectionClosed=func;if(this.RTCMediaConnection){this.RTCMediaConnection.callbacks=this.callbacks.mediaServerCallBacks}console.log("TODO: setOnMediaConnectionConnectionClosed")}setOnMediaConnectionIceStateChange(func){console.log("TODO: setOnMediaConnectionIceStateChange");this.callbacks.mediaServerCallBacks.iceStateChange=func;if(this.RTCMediaConnection){this.RTCMediaConnection.callbacks=this.callbacks.mediaServerCallBacks}console.log("TODO: setOnMediaConnectionIceStateChange")}setOnMediaConnectionConnected(func){this.callbacks.mediaServerCallBacks.connected=func;if(this.RTCMediaConnection){this.RTCMediaConnection.callbacks=this.callbacks.mediaServerCallBacks}}}function initMedia(audiobox,videobox){audioSourceSelect=audiobox;videoSourceSelect=videobox;UMediaStreamer.getDevices().then(function(devices){allDevices=devices;scanning=true;if(allDevices.videoinput.length>0){gum(quickScan[resolutionIdx])}}).catch(function(error){let errorMessage="";if(error.message){errorMessage=error.message}else if(error.name){errorMessage=error.name}else{errorMessage=error.toString()}errorCallback(errorMessage)})}function errorCallback(error){console.log(error)}function gum(resolution){if(window.stream){stream.getTracks().forEach(track=>{track.stop()});window.stream=undefined}let constraints={audio:false,video:{deviceId:allDevices.videoinput[deviceIdx].deviceId?{exact:allDevices.videoinput[deviceIdx].deviceId}:undefined,frameRate:{ideal:15},width:{exact:resolution.width},height:{exact:resolution.height}}};setTimeout(()=>{navigator.mediaDevices.getUserMedia(constraints).then(gotStream).catch(error=>{if(allDevices.videoinput[deviceIdx]!==undefined){console.log("getUserMedia error! deviceId:",allDevices.videoinput[deviceIdx].label," size:",resolution.width,"x"+resolution.height," emsg:",error)}else{console.log("error is occured! ",error)}if(scanning){captureResults("fail")}})},window.stream?200:0);function gotStream(mediaStream){window.stream=mediaStream;captureResults("pass")}}function captureResults(status){if(!scanning)return;if(status==="pass"){allDevices.videoinput[deviceIdx].resolution=quickScan[resolutionIdx].label;allDevices.videoinput[deviceIdx].width=quickScan[resolutionIdx].width;allDevices.videoinput[deviceIdx].height=quickScan[resolutionIdx].height;deviceIdx++;resolutionIdx=0}else{resolutionIdx++}if(resolutionIdx<quickScan.length&&deviceIdx<allDevices.videoinput.length){gum(quickScan[resolutionIdx],allDevices.videoinput[deviceIdx])}else if(deviceIdx<allDevices.videoinput.length-1){if(allDevices.videoinput[deviceIdx].resolution===undefined){allDevices.videoinput.splice(deviceIdx,1)}else{deviceIdx++}resolutionIdx=0;gum(quickScan[resolutionIdx],allDevices.videoinput[deviceIdx])}else{if(window.stream){stream.getTracks().forEach(track=>{track.stop()})}scanning=false;if(videoSourceSelect!==undefined){setDevice("video",videoSourceSelect,allDevices.videoinput)}if(audioSourceSelect!==undefined){setDevice("audio",audioSourceSelect,allDevices.audioinput)}}}function setDevice(type,select,devices){select.empty();if(type==="audio"&&devices.length===0){select.append('<option value="">No Source Available</option>')}else{_.each(devices,function(device){if(type!=="video"||device.resolution!==undefined){let option=$("<option></option>");option.text(device.label);option.val(device.deviceId);select.append(option)}})}}function getResolution(deviceId){let matchingDevice=undefined;_.each(allDevices.videoinput,function(device){if(device.deviceId===deviceId){matchingDevice=device}});return matchingDevice}